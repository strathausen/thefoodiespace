// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator json {
    provider = "prisma-json-types-generator"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    MODERATOR
    USER
}

enum PostType {
    POST
    RECIPE
}

enum PostStatus {
    DRAFT
    PUBLISHED
}

enum ReactionType {
    LIKE
    LOVE
    HAHA
    WOW
    SAD
    ANGRY
    COMMENT
}

enum NotificationType {
    FOLLOW
    REACTION
    COMMENT
    MENTION
    RECIPE
    POST
    MESSAGE
}

enum FollowerType {
    CLOSE_FRIEND
    FRIEND
    ACQUAINTANCE
    FOLLOWER
}

model Reaction {
    id        Int          @id @default(autoincrement())
    createdAt DateTime     @default(now()) @map("created_at")
    updatedAt DateTime     @updatedAt @map("updated_at")
    type      ReactionType

    recipe   Recipe @relation(fields: [recipeId], references: [id])
    recipeId String @map("recipe_id")
    user     User   @relation(fields: [userId], references: [id])
    userId   String @map("user_id")

    @@unique([recipeId, userId, type])
    @@map("reactions")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?      @map("email_verified")
    image         String?
    role          Role           @default(USER)
    pronouns      String?
    showPronouns  Boolean?       @default(false) @map("show_pronouns")
    bio           String?
    internalScore Int?           @default(0) @map("internal_score")
    accounts      Account[]
    sessions      Session[]
    reactions     Reaction[]
    recipes       Recipe[]
    followers     Follower[]     @relation("FollowersToFollowees")
    followeees    Follower[]     @relation("FolloweesToFollowers")
    notifications Notification[]
    bookmarks     Bookmark[]
    cookBooks     CookBook[]
    comments      Comment[]

    @@map("users")
}

model Follower {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")

    type FollowerType

    follower   User   @relation("FollowersToFollowees", fields: [followerId], references: [id])
    followerId String @map("follower_id")
    followee   User   @relation("FolloweesToFollowers", fields: [followeeId], references: [id])
    followeeId String @map("followee_id")

    @@unique([followerId, followeeId])
    @@map("followers")
}

model Notification {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    readAt    DateTime @default(now()) @map("read_at")

    content Json
    type    NotificationType

    user   User   @relation(fields: [userId], references: [id])
    userId String @map("user_id")

    @@map("notifications")
}

model Recipe {
    id          String     @id @default(cuid())
    cursor      String?    @unique @default(cuid()) // actually: the server will generate this using publish timestamp + id
    name        String
    text        String?
    featured    Boolean?   @default(false)
    sourceUrl   String?
    createdAt   DateTime   @default(now()) @map("created_at")
    updatedAt   DateTime   @updatedAt @map("updated_at")
    images      String[]
    /// [RecipeStep]
    steps       Json[]
    /// [RecipeIngredient]
    ingredients Json[]
    /// [RecipeInfo]
    info        Json       @default("{}")
    status      PostStatus @default(DRAFT)

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String @map("created_by")

    deletedAt   DateTime?
    publichedAt DateTime?

    // computed fields, updated by triggers
    likeCount    Int @default(0) @map("like_count")
    commentCount Int @default(0) @map("comment_count")
    shareCount   Int @default(0) @map("share_count")

    reactions Reaction[]
    bookmarks Bookmark[]
    comments  Comment[]

    @@index([name])
    @@map("recipes")
}

model Waitlist {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    email     String   @unique
    invited   Boolean? @default(false)

    @@map("waitlist")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Bookmark {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")

    note String?

    user   User   @relation(fields: [userId], references: [id])
    userId String @map("user_id")

    recipe     Recipe   @relation(fields: [recipeId], references: [id])
    recipeId   String   @map("recipe_id")
    cookBook   CookBook @relation(fields: [cookBookId], references: [id])
    cookBookId Int      @map("cook_book_id")

    @@unique([userId, recipeId])
    @@map("bookmarks")
}

model CookBook {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")

    name        String
    description String?

    user   User   @relation(fields: [userId], references: [id])
    userId String @map("user_id")

    bookmarks Bookmark[]

    @@map("cookbooks")
}

model Comment {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    text String

    user   User   @relation(fields: [userId], references: [id])
    userId String @map("user_id")

    recipe   Recipe @relation(fields: [recipeId], references: [id])
    recipeId String @map("recipe_id")

    @@map("comments")
}
