// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    MODERATOR
    USER
}

enum PostType {
    POST
    RECIPE
}

enum PostStatus {
    DRAFT
    PUBLISHED
}

enum ReactionType {
    LIKE
    LOVE
    HAHA
    WOW
    SAD
    ANGRY
}

model Post {
    id          Int        @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime   @default(now()) @map("created_at")
    updatedAt   DateTime   @updatedAt @map("updated_at")
    type        PostType   @default(POST)
    status      PostStatus @default(DRAFT)
    content     Json       @default("{}")

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String @map("created_by")

    reactions Reaction[]

    @@index([name])
    @@map("posts")
}

model Reaction {
    id        Int          @id @default(autoincrement())
    createdAt DateTime     @default(now()) @map("created_at")
    updatedAt DateTime     @updatedAt @map("updated_at")
    type      ReactionType

    post   Post   @relation(fields: [postId], references: [id])
    postId Int    @map("post_id")
    user   User   @relation(fields: [userId], references: [id])
    userId String @map("user_id")

    @@unique([postId, userId])
    @@map("reactions")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?  @map("email_verified")
    image         String?
    role          Role       @default(USER)
    pronouns      String?
    showPronouns  Boolean?   @default(false) @map("show_pronouns")
    bio           String?
    internalScore Int?       @default(0) @map("internal_score")
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    reactions     Reaction[]
    recipes       Recipe[]

    @@map("users")
}

model Recipe {
    id          String     @id @default(cuid())
    name        String
    text        String?
    createdAt   DateTime   @default(now()) @map("created_at")
    updatedAt   DateTime   @updatedAt @map("updated_at")
    images      String[]
    steps       Json[]
    ingredients Json[]
    info        Json       @default("{}")
    status      PostStatus @default(DRAFT)

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String @map("created_by")

    @@index([name])
    @@map("recipes")
}

model Waitlist {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    email     String   @unique
    invited   Boolean? @default(false)

    @@map("waitlist")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
